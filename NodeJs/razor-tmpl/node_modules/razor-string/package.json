{
  "name": "razor-string",
  "version": "0.1.2",
  "description": "string manipulation library for JavaScript",
  "main": "$string.js",
  "scripts": {
    "test": "mocha"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:magicdawn/razor-string.git"
  },
  "keywords": [
    "string",
    "manipulation"
  ],
  "author": {
    "name": "magicdawn"
  },
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/magicdawn/razor-string/issues"
  },
  "homepage": "https://github.com/magicdawn/razor-string",
  "readme": "#razor-string\r\nJust another String manipulation library for JavaScript\r\n\r\n##1.install\r\n1. browser `<script src='.....$string.js'>`\r\n2. node.js\r\n```\r\nnpm install razor-string\r\nvar $string = require('razor-string');\r\n//or in node,without jQuery conflict,you can use $ instead\r\n```\r\n\r\n##2.use\r\nwith step1,you got the `$string` variable,in browser,it's `window.$string`\r\n\r\nthree ways can be touched\r\n1. static methods\r\n```\r\n$string.format(\"{0} + {1} = {2}\",1,1,2);\r\n// \"1 + 1 = 2\"\r\n```\r\n2. use wrappers,and instance methods\r\n```\r\n$(\"{{{{{{{{0} + {1} = {2}\").format(1,1,2).trim(\"{\").str\r\n// \"1 + 1 = 2\"\r\n```\r\nif a static method return a string,the wrapper-method return this,and other return values is direct out.\r\ne.g\r\nthe `$string.trim` and `$string.format` returns a value in type `String`,so the $string(\"str\").trim() and $string(\"str\").format() returns a wrapper instance for you can make chain call. Use wrapper_instance.str or toString() to return the string wrapped in the wrapper instance.\r\nif the static method return other,e.g `$string.startWith(\"hello world\",\"hello\")` => `true` so the `$string(\"hello world\").startWith(\"hello\")` => `true` not the wrapper.\r\n\r\n3. bind method to prototype\r\n```\r\n$string.bindToPrototype();\r\n\"{0} + {1} = {2}\".format(1,1,2); // = \"1 + 1 = 2\"\r\n```\r\nand restore/temporary are available\r\n```\r\n$string.restorePrototype()\r\n$string.temporaryPrototype(function(){\r\n    //manipulate string here in prototype\r\n});\r\n```\r\n\r\n##3.Available methods\r\nHere I use the prototype style to display how-to,just call `$string.bindToPrototype()`\r\n* trim `\"{abc}\".trim(\"{}\")` => `abc`\r\n* replaceAll `\"abab\".replaceAll('a','b')` => `bbbb` this is simply use regex and set global to true,so you need to escape the special chars by yourself.\r\n* format examples above : `\"{0}+{1}={2}\".format(1,2,3)` => `1+2=3`\r\n* startWith/endWith/contains return `true or false`\r\n\r\nand the `console.logf(str_with_format,obj0,obj1,obj2,obj3...)` is also available, the logf means log_with_format\r\n\r\n##4.more string library and contract author\r\nmore library,see : http://stringjs.com/\r\n\r\nauthor mail : 784876393@qq.com",
  "readmeFilename": "README.md",
  "_id": "razor-string@0.1.2",
  "_from": "razor-string@"
}
