var $ = require('../$string.js');
var assert = require('assert');

String.prototype.format = function() {
	return "none";
};

describe('使用$string.bondToPrototype', function() {
	$.bindToPrototype();
	it('format', function() {
		var res = '{0}+{1}={2}'.format(1, 1, 2);
		assert(res === "1+1=2");
	});

	it('replaceAll', function() {
		assert("abab".replaceAll('a', 'b') === "bbbb");
	});

	it('trim', function() {
		var res = "{{{{)))abcd((()))}}}}".trimLeft('{').trimRight('}').trim('()');
		assert.equal(res, "abcd");
	});

	it('startWith', function() {
		assert("abcdEFGxsd".startWith("ABCD", true));
	});
	it('endWIth', function() {
		assert("abcdeshjsXyZ".endWith("XYZ", true));
	});
	it('contains', function() {
		assert('jsdhjsdb123jcsdd'.contains("123"));
	});
});

describe("restorePrototype", function() {
	it('', function() {
		assert.equal("{0}".format(0), '0');
		$.restorePrototype();
		assert.equal("{0}".format(0), 'none');
	});
});

describe('temporaryPrototype',function(){
	it('',function(){
		assert( !(''.startWith) );
		$.temporaryPrototype(function(){
			assert( ''.startWith );
		});
	});
});