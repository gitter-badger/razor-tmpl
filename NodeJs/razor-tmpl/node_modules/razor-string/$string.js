//-----------------------------------------
//  BY Magicdawn
//  Start : 2014-5-20 17:18:42
//  See : string.js https://github.com/jprichardson/string.js
//  上面是string.js,想给它加上static方法,但是源码看不懂,干脆重新写一个自己用
//-----------------------------------------
; (function () {
    var version = '0.1.3';
    var update_date = '2014-5-23';

    //---------------------------------------------------
    //  some basic tool
    //---------------------------------------------------
    String.prototype.first = function () {
        return this[0];
    };
    String.prototype.last = function () {
        return this[this.length - 1];
    };
    //会使for(var i in [1,2,3])执行五次, i = first/last key
    //Array.prototype.first = String.prototype.first;
    //Array.prototype.last = String.prototype.last;

    //1.static methods : $string.format("{0}+{1}={2}",1,1,2);
    //2.wrapper : $string("{0}+{1}={2}").format(1,1,2).string or toString();
    //3.prototype : "{0}+{1}={2}".format(1,1,2)
    //wrapper function
    var $string = function (str) {
        return new Wrapper(str);
    };
    var oldProto = {};
    //一些native methods
    oldProto['trim'] = String.prototype.trim;
    oldProto['trimLeft'] = String.prototype.trimLeft;
    oldProto['trimRight'] = String.prototype.trimRight;
    var statics = {};//静态方法

    //trim
    statics.trimLeft = function (str, chars) {
        //trim 空格时
        if (arguments.length === 1)
        {
            //没有bindPrototype时,trim是native trim
            //bind之后,在bind方法里面保存了native trim
            if (oldProto.trimLeft) return oldProto.trimLeft.call(str);
            else chars = ' \n';//默认trim空格
        }

        chars = [].slice.call(chars);
        var result = [].slice.call(str);
        while (chars.indexOf(result[0]) > -1)
        {
            result.shift();
        }
        return result.join('');
    };
    statics.trimRight = function (str, chars) {
        //trim 空格时
        if (arguments.length === 1)
        {
            if (oldProto.trimRight) return oldProto.trimRight.call(str);
            else chars = ' \n';//默认trim空格
        }

        chars = [].slice.call(chars);
        var result = [].slice.call(str);
        while (chars.indexOf(result[result.length-1]) > -1)
        {
            result.pop();
        }
        return result.join('');
    };
    statics.trim = function (str, chars) {
        //trim 空格时
        if (arguments.length === 1)
        {
            if (oldProto.trim) return oldProto.trim.call(str);
            else chars = ' \n';//默认trim空格
        }

        var result = this.trimLeft(str, chars);
        result = this.trimRight(result, chars);
        return result;
    }
    //replaceAll
    statics.replaceAll = function (str, oldValue, newValue) {
        return str.replace(new RegExp(oldValue, 'g'), newValue);
    }
    statics.format = function (str, obj0, obj1, obj2) {
        objs = [].slice.call(arguments);
        objs.shift();//取出str
        for (var i in objs)
        {
            //将{0} -> obj[0]
            //new RegExp("\\{ 0 \\\}",g)
            str = this.replaceAll(str, "\\{" + i + "\\}", objs[i].toString());
        }
        return str;
    }
    //bool
    statics.startWith = function (str, start, ignoreCase) {
        if (ignoreCase)
        {
            //不区分大小写
            str = str.toLowerCase();
            start = start.toLowerCase();
        }
        for (var i = 0, length = start.length; i < length; i++)
        {
            if (start[i] !== str[i])
            {
                //有一个不等
                return false;
            }
        }
        return true;
    }
    statics.endWith = function (str, end, ignoreCase) {
        if (ignoreCase)
        {
            //不区分大小写
            str = str.toLowerCase();
            end = end.toLowerCase();
        }
        for (var i = 0, length = end.length; i < length; i++)
        {
            // 1 2 3 4 5 6
            //       4 5 6
            //i=0 
            if (end[end.length - 1 - i] !== str[str.length - 1 - i])
            {
                //有一个不等
                return false;
            }
        }
        return true;
    };
    statics.contains = function (str, subStr, ignoreCase) {
        if (ignoreCase)
        {
            //不区分大小写
            str = str.toLowerCase();
            subStr = subStr.toLowerCase();
        }
        return str.indexOf(subStr) > -1;
    }





    //-------------------------------------------------
    //  Wrapper
    //-------------------------------------------------
    var Wrapper = function (str) {
        this.original = str;
        this.str = str;
        this.toString = function () {
            return this.str;
        };
    };
    for (var method in statics)
    {
        (function (method) {
            //$string("xxx").format(1,2,3)
            Wrapper.prototype[method] = function () {
                //更新里面str,返回wrapper
                var objs = [].slice.call(arguments);
                var result = statics[method].apply(statics, [this.str].concat(objs));
                if (typeof result === 'string')
                {
                    //结果仍然是string,可以继续包装下去
                    this.str = result;
                    return this;
                }
                else
                {
                    //结果是bool值什么的
                    return result;
                }
            };
            //bind to $string
            $string[method] = statics[method];
        })(method);
    }

    //------------------------------------------------
    //  Prototype
    //------------------------------------------------
    $string.bindToPrototype = function () {
        for (var method in statics)
        {
            (function (method) {
                //save to oldProto
                oldProto[method] = String.prototype[method];
                String.prototype[method] = function () {
                    var args = [].slice.call(arguments);
                    args.unshift(this);
                    return statics[method].apply(statics, args);
                };

            })(method);
        }
		return this;
    }
    $string.restorePrototype = function () {
        for (var method in statics)
        {
            (function (method) {
                String.prototype[method] = oldProto[method];
            })(method);
        }
		return this;
    }
    $string.temporaryPrototype = function (func) {
        $string.bindToPrototype();
        func();
        $string.restorePrototype();
		return this;
    }

    //------------------------------------------------
    //  exports
    //------------------------------------------------
    $string.version = version;
    $string.update_date = update_date;
    if (typeof module !== 'undefined' && module && module.exports)
    {
        module.exports = $string;
    }
    else
    {
        window.$string = $string;
    }

    //-------------------------------------
    //  console
    //-------------------------------------
    //log with format
    console.logf = function (str, obj0, obj1, obj2) {
        var result = statics.format.apply(statics, arguments);
        console.log(result);
    }
})();