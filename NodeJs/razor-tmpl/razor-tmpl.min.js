//------------------------------------
// Created BY Magicdawn
// 2014-4-22 20:09:22
//http://tool.oschina.net/jscompress
//------------------------------------
String.prototype.replaceAll = function (b, a) { return this.replace(new RegExp(b, "g"), a) }; String.prototype.format = function (e, d, c) { var a = this; for (var b in arguments) { a = a.replaceAll("\\{" + b + "\\}", arguments[b].toString()) } return a }; (function (a) { function g(l, k) { if (k) { l = l.replace(/\/\/.*$/gm, "").replace(/\/\*[\s\S]*\*\//g, "") } return l.replace(/@\*[\s\S]*?\*@]/g, "").replace(/\n+/g, "\n").replace(/ +/g, " ").replace(/<!--[\s\S]*?-->/g, "").trim() } function e(l) { var k = l.global ? "g" : ""; k += l.multiline ? "m" : ""; k += l.ignoreCase ? "i" : ""; return new RegExp(l.source, k) } var c = { CodeBlock: 0, Variable: 1, String: 2 }; function b(k, l) { this.Content = k; this.SegmentType = l } function j(k) { this.template = k; this.processedIndex = -1; this.segments = [] } var h = { ForWhile: /^\S(for|while)\s*?\([\s\S]*?\)\s*?\{[\s\S]*?\}/g, IfElse: /^\Sif\([\s\S]*?\)[\s\S]*?(else)?/g, Each: /^\Seach\s*?\([\s\S]+?\)\s*?\{[\s\S]*?\}/g }; var i = { symbol: "@", process: function (l) { var k = new j(g(l)); this.processStringBlock(k); return k.segments }, processStringBlock: function (l) { var n = l.template; for (var k = 0, p = n.length; k < p; k++) { var q = n[k]; if (q == this.symbol) { this.processString(l, k); var m = n[k + 1]; switch (m) { case this.symbol: k = this.processEscapeSymbol(l, k); break; case "{": k = this.processCodeBlock(l, k); break; case "(": k = this.processVariable(l, k); break; case "*": k = this.processComment(l, k); break; default: var r = l.template.substring(k); if (e(h.ForWhile).test(r)) { k = this.processForWhile(l, k) } else { if (e(h.Each).test(r)) { k = this.processEach(l, k) } else { if (e(h.IfElse).test(r)) { k = this.processIfElse(l, k) } } } break } } } var o = l.template.substring(l.processedIndex + 1, l.template.length).trim(); if (o) { l.segments.push(new b(o, c.String)) } }, processString: function (l, k) { var m = l.template.substring(l.processedIndex + 1, k).trim(); if (m) { l.segments.push(new b(m, c.String)) } l.processedIndex = k - 1 }, processEscapeSymbol: function (l, k) { l.segments.push(new b(this.symbol, c.String)); l.processedIndex = k + 1; return l.processedIndex }, processCodeBlock: function (l, k) { var m = this.getSecondIndex(l.template, k + 1); var n = l.template.substring(k + 2, m).trim(); if (n) { n = this.getOriginalFromEscapedCode(n); l.segments.push(new b(n, c.CodeBlock)) } l.processedIndex = m; return l.processedIndex }, processVariable: function (l, k) { var m = this.getSecondIndex(l.template, k + 1); var n = l.template.substring(k + 2, m).trim(); if (n) { n = this.getOriginalFromEscapedCode(n); if (/^- /g.test(n)) { n = n.substring(2); n += ".replace(/&/g,'&amp;')"; n += ".replace(/</g,'&lt;')"; n += ".replace(/>/g,'&gt;')"; n += ".replace(/'/g,'&#39;')"; n += '.replace(/"/g,"&#34;")'; n += ".replace(/\\//g,'&#47;')"; l.segments.push(new b(n, c.Variable)) } else { l.segments.push(new b(n, c.Variable)) } } l.processedIndex = m; return l.processedIndex }, processForWhile: function (p, r) { var q = p.template.substring(r); var l = q.indexOf("{") + r; var k = this.getSecondIndex(p.template, l); var o = p.template.substring(r + 1, l + 1); var n = p.template.substring(l + 1, k); var m = "}"; o = this.getOriginalFromEscapedCode(o); p.segments.push(new b(o, c.CodeBlock)); var s = this.process(n); p.segments = p.segments.concat(s); p.segments.push(new b(m, c.CodeBlock)); p.processedIndex = k; return p.processedIndex }, processEach: function (l, q) { var n = l.template.substring(q); var v = n.indexOf("(") + q; var p = this.getSecondIndex(l.template, v); var u = n.indexOf("{") + q; var t = this.getSecondIndex(l.template, u); var m = l.template.substring(v + 1, p).trim(); var x = m.indexOf("in"); var w = m.substring(0, x).trim(); var r = m.substring(x + 2).trim(); var s = "for(var $index in {1}) { var {0} = {1}[$index];".format(w, r); l.segments.push(new b(s, c.CodeBlock)); var o = l.template.substring(u + 1, t).trim(); var k = this.process(o); l.segments = l.segments.concat(k); l.segments.push(new b("}", c.CodeBlock)); l.processedIndex = t; return t }, processIfElse: function (r, t) { var s = r.template.substring(t); var k = s.indexOf("{") + t; var m = this.getSecondIndex(r.template, k); var q = r.template.substring(t + 1, k + 1); var p = r.template.substring(k + 1, m); var o = "}"; q = this.getOriginalFromEscapedCode(q); r.segments.push(new b(q, c.CodeBlock)); var y = this.process(p); r.segments = r.segments.concat(y); r.segments.push(new b(o, c.CodeBlock)); r.processedIndex = m; s = r.template.substring(m + 1); if (/^\s*else/g.test(s)) { var l = s.indexOf("{") + m + 1; var v = this.getSecondIndex(r.template, l); var x = "else{"; var w = r.template.substring(l + 1, v); var u = "}"; r.segments.push(new b(x, c.CodeBlock)); var n = this.process(w); r.segments = r.segments.concat(n); r.segments.push(new b(u, c.CodeBlock)); r.processedIndex = v } return r.processedIndex }, processComment: function (l, k) { var m = this.getSecondIndex(l.template, k); l.processedIndex = m; return m }, getSecondIndex: function (s, k) { var n = { "{": "}", "(": ")" }; n[this.symbol] = this.symbol; var o = s.substr(k, 1); var m = n[o]; var p = 1; for (var q = k + 1, l = s.length; q < l; q++) { var r = s.substr(q, 1); if (r == m) { p--; if (p == 0) { break } } else { if (r == o) { p++ } } } return q }, getOriginalFromEscapedCode: function (k) { return k.replaceAll("&lt;", "<").replaceAll("&gt;", ">").replaceAll("&amp;", "&") } }; var d = { modelName: "ViewBag", enableEmptyValue: false, escapeInFunction: function (k) { if (!k) { return k } return k.replace(/'/g, "\\'").replace(/"/g, '\\"').replace(/(\r?\n)+/g, "\\n") }, compile: function (l) { var n = []; n.push("var result='';"); for (var m in l) { var o = l[m].Content; switch (l[m].SegmentType) { case c.CodeBlock: n.push(o); break; case c.Variable: if (!this.enableEmptyValue) { var k = "result+={0};".format(o); n.push(k) } else { var k = "if(typeof({0}) != 'undefined' && {0}) result+={0}; else result+='{0}';".format(o); n.push(k) } break; case c.String: var k = "result+='{0}';".format(this.escapeInFunction(o)); n.push(k); break; default: break } } n.push("return result;"); return new Function(this.modelName, n.join("")) } }; var f = { compile: function (l) { var k = i.process(l); var m = d.compile(k); return m }, render: function (l, k) { var m = this.compile(l); return m(k) }, changeSymbol: function (k) { i.symbol = k }, changeModelName: function (k) { d.modelName = k }, enableEmptyValue: function (k) { d.enableEmptyValue = k }, init: function () { this.changeSymbol("@"); this.changeModelName("ViewBag"); this.enableEmptyValue(false) }, version: "0.3.1", updateDate: "2014-4-22" }; if (typeof (module) != "undefined" && module.exports) { module.exports = f } else { a.razor = f } if (typeof ($) != "undefined" && $) { $(function () { $("[razor-template]").hide() }); $.fn.extend({ compile: function () { return f.compile(this.html()) }, render: function (l) { var k = this.html(); return f.render(k, l) }, renderToParent: function (l) { var k = this.render(l); this.parent().append(k) }, renderInParent: function (m, l) { var k = this.render(m); if (l) { var n = this; this.parent().html(""); this.parent().append(this); this.parent().append(k) } else { this.parent().html(k) } }, compileNode: function () { var l = []; var k = (function (s) { var r = { content: null, symbol: null }; var q = s.attr("razor-for") || s.attr("data-razor-for"); if (q) { r.content = q; r.symbol = "for"; return r } q = s.attr("razor-if") || s.attr("data-razor-if"); if (q) { r.content = q; r.symbol = "if"; return r } q = s.attr("razor-while") || s.attr("data-razor-while"); if (q) { r.content = q; r.symbol = "while"; return r } return r })(this); if (k.symbol) { var o = k.symbol + "(" + k.content + "){"; l.push(new b(o, c.CodeBlock)) } var p = this.attr("razor-template") || this.html(); var m = i.process(p); l = l.concat(m); if (k.symbol) { l.push(new b("}", c.CodeBlock)) } var n = d.compile(l); return n }, renderNode: function (l) { var m = this.compileNode(); var k = m(l); if (!this.attr("razor-template")) { var n = this.html().trim(); this.attr("razor-template", n) } this.html(k); this.show() }, compileRepeat: function () { var n = []; var q = this.attr("razor-repeat").trim() || this.attr("data-razor-repeat").trim(); if (q) { var r = q.indexOf("in"); var s = q.substring(0, r).trim(); var p = q.substring(r + 2).trim(); var o = "for(var $index in {0}){ var {1} = {0}[$index];".format(p, s); n.push(new b(o, c.CodeBlock)) } var m = this.attr("razor-template") || this.html(); var k = i.process(m); n = n.concat(k); if (q) { n.push(new b("}", c.CodeBlock)) } var l = d.compile(n); return l }, renderRepeat: function (l) { var m = this.compileRepeat(); var k = m(l); if (!this.attr("razor-template")) { var n = this.html().trim(); this.attr("razor-template", n) } this.html(k); this.show() } }) } })(this);