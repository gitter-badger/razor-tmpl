String.prototype.format = function (f, d, c) { var a = this; var e = arguments; var b = null; if (arguments.length > 1) { b = new RegExp("\\{([0-" + (arguments.length - 1) + "])\\}", "g") } else { if (arguments.length == 1) { b = /\{(0)\}/g } else { return this } } a = a.replace(b, function (j, g, i, h) { return e[g] }); return a }; (function (d) { var b = { CodeBlock: 0, Variable: 1, String: 2 }; function a(j, k) { this.Content = j; this.SegmentType = k } function i(j) { this.template = j; this.processedIndex = -1; this.segments = [] } var g = { Loop: /^\Sfor|while\([\s\S]*?\)\s*?\{[\s\S]*?\}/, Condition: /^\S(if\([\s\S]*?\)\s*?\{)([\s\S]*?)(\})(?:\s*?(else\s*?\{)([\s\S]*?)(\}))?/ }; function f(j) { return j.replace(/\/\/.*$/gm, "").replace(/\/\*[\s\S]*\*\//g, "").replace(/\n+/g, "").replace(/ +/g, " ") } var h = { symbol: "@", process: function (k) { var j = new i(f(k)); this.processStringBlock(j); return j.segments }, processStringBlock: function (k) { var m = k.template; for (var j = 0, o = m.length; j < o; j++) { var p = m[j]; if (p == this.symbol) { this.processString(k, j); var l = m[j + 1]; switch (l) { case this.symbol: j = this.processEscapeSymbol(k, j); break; case "{": j = this.processCodeBlock(k, j); break; case "(": j = this.processVariable(k, j); break; default: var q = k.template.substring(j); if (g.Loop.test(q)) { j = this.processLoop(k, j) } else { if (g.Condition.test(q)) { j = this.processCondition(k, j) } } break } } } var n = k.template.substring(k.processedIndex + 1, k.template.length).trim(); if (n) { k.segments.push(new a(n, b.String)) } }, processString: function (k, j) { var l = k.template.substring(k.processedIndex + 1, j).trim(); if (l) { k.segments.push(new a(l, b.String)) } k.processedIndex = j - 1 }, processEscapeSymbol: function (k, j) { k.segments.push(new a(this.symbol, b.String)); k.processedIndex = j + 1; return k.processedIndex }, processCodeBlock: function (k, j) { var l = this.getSecondBraceIndex(k.template, j + 1); var m = k.template.substring(j + 2, l).trim(); if (m) { k.segments.push(new a(m, b.CodeBlock)) } k.processedIndex = l; return k.processedIndex }, processVariable: function (k, j) { var l = this.getSecondBraceIndex(k.template, j + 1); var m = k.template.substring(j + 2, l).trim(); if (m) { k.segments.push(new a(m, b.Variable)) } k.processedIndex = l; return k.processedIndex }, processLoop: function (o, q) { var p = o.template.substring(q); var k = p.indexOf("{") + q; var j = this.getSecondBraceIndex(o.template, k); var n = o.template.substring(q + 1, k + 1); var m = o.template.substring(k + 1, j); var l = "}"; o.segments.push(new a(n, b.CodeBlock)); var r = this.process(m); o.segments = o.segments.concat(r); o.segments.push(new a(l, b.CodeBlock)); o.processedIndex = j; return o.processedIndex }, processCondition: function (n, q) { var p = n.template.substring(q); var o = g.Condition.exec(p); var m = o[1]; var l = o[2]; var k = o[3]; n.segments.push(new a(m, b.CodeBlock)); var u = this.process(l); n.segments = n.segments.concat(u); n.segments.push(new a(k, b.CodeBlock)); if (o[4]) { var t = o[4]; var s = o[5]; var r = o[6]; n.segments.push(new a(t, b.CodeBlock)); var j = this.process(s); n.segments = n.segments.concat(j); n.segments.push(new a(r, b.CodeBlock)) } n.processedIndex = q + o[0].length - 1; return n.processedIndex }, getSecondBraceIndex: function (m, k) { var q = m.substr(k, 1); var j = q == "{" ? "}" : ")"; var o = 1; var l = k + 1; var n = m.length; for (; l < n; l++) { var p = m.substr(l, 1); if (p == q) { o++ } else { if (p == j) { o--; if (o == 0) { break } } } } return l } }; var c = { modelName: "ViewBag", enableEmptyValue: false, compile: function (k) { var m = []; m.push("var result=[];"); for (var l in k) { var n = k[l].Content; switch (k[l].SegmentType) { case b.CodeBlock: m.push(n); break; case b.Variable: if (!this.enableEmptyValue) { var j = "result.push(" + n + ");"; m.push(j) } else { var j = "if(typeof(data) != 'undefined' && " + n + ") result.push(" + n + ");"; j += "else result.push('" + n + "');"; m.push(j) } break; case b.String: var j = "result.push('" + n + "');"; m.push(j); break; default: break } } m.push("return result.join('');"); return new Function(this.modelName, m.join("")) } }; var e = { compile: function (k) { var j = h.process(k); var l = c.compile(j); return l }, render: function (k, j) { var l = this.compile(k); return l(j) }, changeSymbol: function (j) { h.symbol = j }, changeModelName: function (j) { c.modelName = j }, enableEmptyValue: function (j) { c.enableEmptyValue = j }, init: function () { this.changeSymbol("@"); this.changeModelName("ViewBag"); this.enableEmptyValue(false) } }; d.razor = e; if (typeof ($) != "undefined" && $) { $(function () { $("[razor-template]").hide() }); $.fn.extend({ compile: function () { return e.compile(this.html()) }, render: function (k) { var j = this.html(); return e.render(j, k) }, renderToParent: function (k) { var j = this.render(k); this.parent().append(j) }, renderInParent: function (l, k) { var j = this.render(l); if (k) { var m = this; this.parent().html(""); this.parent().append(this); this.parent().append(j) } else { this.parent().html(j) } }, compileNode: function () { var k = []; var j = (function (r) { var q = { content: null, symbol: null }; var p = r.attr("razor-for") || r.attr("data-razor-for"); if (p) { q.content = p; q.symbol = "for"; return q } p = r.attr("razor-if") || r.attr("data-razor-if"); if (p) { q.content = p; q.symbol = "if"; return q } p = r.attr("razor-while") || r.attr("data-razor-while"); if (p) { q.content = p; q.symbol = "while"; return q } return q })(this); if (j.symbol) { var n = j.symbol + "(" + j.content + "){"; k.push(new a(n, b.CodeBlock)) } var o = this.attr("razor-template") || this.html(); var l = h.process(o); k = k.concat(l); if (j.symbol) { k.push(new a("}", b.CodeBlock)) } var m = c.compile(k); return m }, renderNode: function (k) { var l = this.compileNode(); var j = l(k); if (!this.attr("razor-template")) { var m = this.html().trim(); this.attr("razor-template", m) } this.html(j); this.show() }, compileRepeat: function () { var m = []; var p = this.attr("razor-repeat").trim() || this.attr("data-razor-repeat").trim(); if (p) { var q = p.indexOf("in"); var r = p.substring(0, q).trim(); var o = p.substring(q + 2).trim(); var n = "for(var i in {0}){ var {1} = {0}[i];".format(o, r); m.push(new a(n, b.CodeBlock)) } var l = this.attr("razor-template") || this.html(); var j = h.process(l); m = m.concat(j); if (p) { m.push(new a("}", b.CodeBlock)) } var k = c.compile(m); return k }, renderRepeat: function (k) { var l = this.compileRepeat(); var j = l(k); if (!this.attr("razor-template")) { var m = this.html().trim(); this.attr("razor-template", m) } this.html(j); this.show() } }) } })(window);